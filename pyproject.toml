[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "supermanus-task-enforcer"
version = "1.0.0"
description = "Universal LLM Task Discipline System - Prevents 90% deviation problem"
authors = [
    {name = "SuperManUS Team", email = "team@supermanus.dev"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["llm", "ai", "task-management", "code-enforcement", "development"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance"
]

dependencies = [
    "pathlib",
    "typing_extensions>=4.0.0",
    "pydantic>=2.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0"
]

integrations = [
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "click>=8.0.0"
]

[project.urls]
Homepage = "https://github.com/your-org/SuperManUS-TaskEnforcer"
Documentation = "https://supermanus-task-enforcer.readthedocs.io/"
Repository = "https://github.com/your-org/SuperManUS-TaskEnforcer"
Issues = "https://github.com/your-org/SuperManUS-TaskEnforcer/issues"
Changelog = "https://github.com/your-org/SuperManUS-TaskEnforcer/blob/main/CHANGELOG.md"

[project.scripts]
supermanus-install = "supermanus.installer:main"
supermanus-demo = "supermanus.demo:main"
supermanus-validate = "supermanus.validator:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["supermanus*", "integrations*"]
exclude = ["tests*", "example_project*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["supermanus", "integrations"]
omit = [
    "*/tests/*",
    "*/example_project/*",
    "demo_enforcement.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]